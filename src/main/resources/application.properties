#### INTEGRATION TRIGGERING PROPERTIES #####################################################

# The integration's listening port for API triggering
server.port=8080

# Credentials needed to perform basic authentication on the API triggering of
# the integration
trigger.api.username=usr
trigger.api.password=pass

# The polling frequency with which user tasks are polled and name of the user
# tasks to poll for workflow triggering.
trigger.collibra.workflow.enabled=false
trigger.collibra.workflow.polling-frequency.ms=10000
trigger.collibra.workflow.user-task=Sync Data User Task

# Cron expression defining when the integration is triggered by the internal
# scheduler. Trigger all the endpoints.
trigger.api.scheduler-cron-expression=0 0 12 1 1  *
tigger.api.scheduler-cron-enabled=false

# Cron expression defining when the integration is triggered by the internal
# scheduler. Trigger reference-data endpoint.
trigger.api.scheduler-cron-referenceData=0 0 12 * * ?
trigger.api.scheduler-cron-referenceData-enabled=false

# Cron expression defining when the integration is triggered by the internal
# scheduler. Trigger data-quality-metrics endpoint.
trigger.api.scheduler-cron-dataQualityMetrics=0 0 12 * * ?
trigger.api.scheduler-cron-dataQualityMetrics-enabled=false

# Cron expression defining when the integration is triggered by the internal
# scheduler. Trigger systems-applications-databases endpoint.
trigger.api.scheduler-cron-systemsApplicationsDatabases=0 0 12 * * ?
trigger.api.scheduler-cron-systemsApplicationsDatabases-enabled=false

#### COLLIBRA CONNECTION PROPERTIES #######################################################

collibra.url=https://infosys-pdl.collibra.com
collibra.username=Aaman_Lamba
collibra.password=DuranDuran75!

#### DATABASE PROPERTIES ###################################################################

# Properties for the connection to the database
#spring.datasource.url=jdbc:h2:mem:collibraTestDb
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=

# Connect to SQL Server
# spring.datasource.url=jdbc:sqlserver://localhost;databaseName=employees;TrustServerCertificate=True
spring.datasource.url=jdbc:sqlserver://localhost;databaseName=pubs;TrustServerCertificate=True
spring.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver
spring.datasource.username=sbuser2
spring.datasource.password=Springfox75!


#pubs data source
pubs.datasource.jdbc-url=jdbc:sqlserver://localhost;databaseName=pubs;TrustServerCertificate=True
pubs.datasource.hikari.jdbcUrl = ${pubs.datasource.url}
pubs.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
pubs.datasource.username=sbuser2
pubs.datasource.password=Springfox75!

#Northwind data source
nw.datasource.jdbc-url=jdbc:sqlserver://localhost;databaseName=Northwind;TrustServerCertificate=True
nw.datasource.hikari.jdbcUrl = ${nw.datasource.url}
nw.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
nw.datasource.username=sbuser2
nw.datasource.password=Springfox75!


# Database queries to get all tables which contain code values. Used for the Reference Data use case.
query.select.reference.data.tables=SELECT TABLE_SCHEMA, TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'NORTHWIND' AND TABLE_NAME LIKE '%_STATUS'


# Queries that will be performed against the Data Quality Metric schema to obtain the required data quality metadata. Used for the Data Quality Metrics use case.
talend.metrics.database.query.select=SELECT \
IND_VALUE.INDV_PK, IND_VALUE.INDV_INT_VALUE, IND_VALUE.INDV_ROW_COUNT, IND_VALUE.INDV_ITHRESH_OK, IND_VALUE.INDV_ITHRESH_LOW, \
IND_VALUE.INDV_ITHRESH_HI, ANALYSIS.AN_TYPE, ANALYSIS.AN_PK, IND_VALUE.ELEMENT_PK, IND_VALUE.INDICATOR_PK, IND_DEF.IND_LABEL, \
ANALYZED_ELEMENT.ELT_CATALOG_NAME, ANALYZED_ELEMENT.ELT_TABLE_NAME ,ANALYZED_ELEMENT.ELT_COLUMN_NAME, IND_VALUE.AN_RUNTIME \
FROM talend_dq.TDQ_INDICATOR_VALUE AS IND_VALUE \
inner join talend_dq.TDQ_ANALYSIS AS ANALYSIS \
ON IND_VALUE.ANALYSIS_PK = ANALYSIS.AN_PK \
INNER JOIN talend_dq.TDQ_INDICATOR_DEFINITION AS IND_DEF \
ON IND_VALUE.INDICATOR_PK = IND_DEF.IND_PK \
INNER JOIN talend_dq.TDQ_ANALYZED_ELEMENT AS ANALYZED_ELEMENT \
ON IND_VALUE.ELEMENT_PK = ANALYZED_ELEMENT.ELT_PK \
WHERE IND_DEF.IND_CATEGORY = 'Simple Statistics'

# Database query to get data for Systems Applications Databases use case.
#query.select.systemsApplicationsDatabases.data=SELECT * FROM SYSTEMS_APPLICATIONS_DATABASES.SYSTEM_APP_DB
query.select.systemsApplicationsDatabases.data=SELECT * FROM SYSTEMS_APPLICATIONS_DATABASES.SYSTEM_APP_DB
#### COLLIBRA DOMAINS AND COMMUNITIES #########################################################
## -- query to get all columns of all tables for all schemas in a database
query.select.schemasTablesColumns.data = select schema_name(tab.schema_id) as schema_name, \
    tab.name as table_name, \
    col.column_id, \
    col.name as column_name, \
    t.name as data_type, \
    col.max_length, \
    col.precision \
from sys.tables as tab \
    inner join sys.columns as col \
        on tab.object_id = col.object_id \
    left join sys.types as t \
    on col.user_type_id = t.user_type_id \
order by schema_name, \
    table_name, \
    column_id

## query to get schemas and tables
query.select.schemasTables.data = select schema_name(t.schema_id) as schema_name, \
       t.name as table_name, \
       t.create_date, \
       t.modify_date \
from sys.tables t \
order by schema_name,table_name;
## where schema_name(t.schema_id) = 'Person' -- put schema name here

# Names of the 'community' and 'domain' in the collibra instance where the Reference Data metadata will be imported.
collibra.domain.reference.data=Reference Data
collibra.community.reference.data=Collibra Reconnect

# Names of the 'community' and 'domain' in the collibra instance where the Talend Metrics metadata will be imported.
collibra.community.talend.metrics=Collibra Reconnect
collibra.domain.talend.metrics=Data Quality Metrics

# Names of the 'community' and 'domain' in the collibra instance where the Systems, Applications and Databases metadata will be imported.
collibra.community.systemsApplicationsDatabases=Collibra Reconnect
collibra.domain.systemsApplicationsDatabases=Systems, Applications and Databases

#### OTHER PROPERTIES #########################################################
# Names of the 'community' and 'domain' in the collibra instance where the Systems, Applications and Databases metadata will be imported.
collibra.community.schemasTablesColumns=Collibra Reconnect
collibra.domain.schemasTablesColumns=Schemas, Tables and Columns
# Properties for configuring the integration to use HTTPs for the listening endpoint (self-signed certificate).
server.ssl.enabled=false
server.ssl.key-alias=
server.ssl.key-store=
server.ssl.key-store-password=
server.ssl.key-password=

# Properties for enabling the 'health monitoring' of the integration.
management.endpoints.enabled-by-default=true
management.endpoint.info.enabled=true
management.endpoints.web.exposure.include=*
management.endpoints.web.base-path=/manage

#Properties for the in-memory H2 database. This database is spun up during deployment.
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
